/** * Class Room - a room in an adventure game. * * This class is part of the "World of Zuul" application.  * "World of Zuul" is a very simple, text based adventure game.   * * A "Room" represents one location in the scenery of the game.  It is  * connected to other rooms via exits.  For each existing exit, the room  * stores a reference to the neighboring room. *  * @author  Michael Kolling and David J. Barnes * @version 1.0 (February 2002) DBMOD:04/04/2008 */public class Room {    private String description;    //private HashMap<String,Room> exits;        // stores exits of this room    private DoorList doors = new DoorList();    private ItemList items = new ItemList();    private String imageName;    /**     * Create a room described "description" with a given image.      * Initially, it has no exits. "description" is something like      * "in a kitchen" or "in an open court yard".     */    public Room(String description, String image) {        this.description = description;		imageName = image;    }    /**     * Defines an exit from this room.     */    public void setExit(String direction, Room neighbor) {        doors.addDoor(direction, neighbor);    }        /**     * Defines an exit that needs a key from this room.     */    public void setExit(String direction, Room neighbor, String keyString) {        doors.addDoor(direction, neighbor, keyString);    }        public Door getDoor(String direction) {    	return doors.getDoor(direction);    }        /**     * Return the description of the room (the one that was defined in the     * constructor).     */    public String getShortDescription() {        return description;    }    /**     * Return a long description of this room, in the form:     *     You are in the kitchen.     *     Exits: north west     */    public String getLongDescription() {    	return "You are " + description + ".\n" + getExitString() + ".\n" + getItemString();    }        /**    * Return a description of the room's items,    * for example "Items: Magic cookie, 50". Question 7.22    * @return A description of the available items.    */    public String getItemString() {    	if(items.getItemListSize() == 0) return "Items: No items in this room.";    	return "Items : " + items.getItemString();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west".     */    private String getExitString() {        return "Exits :" + doors.getDoorsString();    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". If there is no room in that direction, return null.     */    public Room getExit(String direction) {        return doors.getNeighbor(direction);    }	/**     * Return a string describing the room's image name     */	public String getImageName() {		return imageName;	}	//Code rajouté        /**    * Creates an instance of item with given description and weight    * Question 7.22    */    public void addItem(String name, String description, Integer weight) {    	items.addItem(new Item(name, description, weight));    }        /**     * Adds an item to the room that has been dropped by the player.     * @param item Dropped item.     */    public void addItem(Item item) {    	items.addItem(item);    }        /**     * Removes an item from the room.     * @param i Item to remove.     */    public void removeItem(Item i) {    	items.removeItem(i);    }        /**     * Searches an item by name in the items list of the room.     * @param name Name of the item we're looking for.     * @return The reference of the item if it exists, null if it doesn't.     */    public Item findItem(String name) {    	return items.findItem(name);    }    	}